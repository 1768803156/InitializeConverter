
import android.content.Context;
import android.text.TextUtils;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;

/**
 * This is a constructor for initializing your model class.
 *
 * Its best use is to avoid handmade model class initialization especially when your model class is
 * so complex or has inline class.
 *
 * <p>You can create a InitializeConverter instance by invoking {@code new
 * InitializeConverter(context)}
 * if the default configuration is all you need.
 *
 * <p>Here is an example of how InitializeConverter is used for a simple Class:
 *
 * <pre>
 * InitializeConverter convert = new InitializeConverter();
 * MyType target = convert.from(json, MyType.class); // instantiate your MyType.class
 * </pre></p>
 *
 * Created by lawson on 16/4/8.
 */
public class InitializeConverter {

  public static final String DEFAULT_STRING = "InitializeConverter";
  public static final int DEFAULT_INTEGER = 1;
  public static final float DEFAULT_FLOAT = 1.0f;
  public static final double DEFAULT_DOUBLE = 1.0;

  private String strSeed;
  private int intSeed;
  private float floatSeed;
  private double doubleSeed;
  private String packageName;

  public InitializeConverter(Context context) {
    this(context, DEFAULT_STRING, DEFAULT_INTEGER, DEFAULT_FLOAT, DEFAULT_DOUBLE);
  }

  public InitializeConverter(Context context, String strSeed, int intSeed, float floatSeed,
      double doubleSeed) {
    this.strSeed = strSeed;
    this.intSeed = intSeed;
    this.floatSeed = floatSeed;
    this.doubleSeed = doubleSeed;
    packageName = context.getPackageName();
    if (TextUtils.isEmpty(packageName)) {
      throw new IllegalArgumentException("package name must not be null");
    }
  }

  @SuppressWarnings("unchecked") public Object from(Class service) {
    Object object = null;
    try {
      object = service.newInstance();

      Field[] fields = service.getDeclaredFields();
      for (Field field : fields) {
        Class fieldClass = field.getType();
        if (fieldClass == String.class) {
          assign(field, object, strSeed);
        }
        if (fieldClass == int.class) {
          assign(field, object, intSeed);
        }
        if (fieldClass == float.class) {
          assign(field, object, floatSeed);
        }
        if (fieldClass == double.class) {
          assign(field, object, doubleSeed);
        }
        if (isCustomObject(fieldClass)) {
          assign(field, object, from(fieldClass));
        }
        if (fieldClass.isAssignableFrom(List.class)) {
          List list = new ArrayList<>();
          list.add(from(getGenericType(field))); //Only add one element for initialization
          assign(field, object, list);
        }
      }
    } catch (InstantiationException e) {
      e.printStackTrace();
    } catch (IllegalAccessException e) {
      e.printStackTrace();
    }

    return object;
  }

  /**
   * Whether this class created by developer or not
   *
   * @param c target class
   */
  private boolean isCustomObject(Class c) {
    return c.getPackage() != null && !TextUtils.isEmpty(c.getPackage().getName()) && c.getPackage()
        .getName()
        .equals(packageName);
  }

  /**
   * Assign a given value to specific field of a target object
   *
   * @throws IllegalAccessException
   */
  private void assign(Field field, Object object, Object value) throws IllegalAccessException {
    boolean accessible = field.isAccessible();
    field.setAccessible(true);
    field.set(object, value);
    field.setAccessible(accessible);
  }

  /**
   * Returns the generic type of this field.
   *
   * @return the generic type
   */
  public Class getGenericType(Field field) {
    ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();
    Type[] types = parameterizedType.getActualTypeArguments();
    return (Class) types[0];
  }
}
